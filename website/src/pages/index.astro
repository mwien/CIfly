---
import "../styles/global.css";
import "katex/dist/katex.min.css";
import Layout from "../layouts/Layout.astro";
import Box from "../components/Box.astro";
import Ruletable from "../components/Ruletable.astro";
import CodeSwitcher from "../components/CodeSwitcher.astro";
import { addHeader } from "../shiki/transformers.ts";
import Carousel from "../components/Carousel.astro";
import CarouselSlide from "../components/CarouselSlide.astro";
import RuletableCardCarousel from "../components/RuletableCardCarousel.astro";
import ApplicationCardCarousel from "../components/ApplicationCardCarousel.astro";
import ReductionFigure from "../components/ReductionFigure.astro";
import { getCollection } from "astro:content";
import { Code } from "astro:components";
import CodeHelper from "../components/CodeHelper.astro";

let ruletables = await getCollection("ruletables");
ruletables = ruletables.sort((a, b) =>
  a.data.source.id < b.data.source.id ? -1 : 1,
);
let applications = await getCollection("applications");
applications = applications.sort((a, b) => (a.id < b.id ? -1 : 1));
---

<Layout postTitle="Efficient Algorithms for Causal Inference">
  <div class="w-full md:w-17/18 flex flex-col gap-10 md:gap-14 my-4 md:mb-10">
    <section
      id="section-slogan"
      class="flex flex-col items-center mt-2 md:mt-8 mb-1"
    >
      <h2
        class="text-gray-900 dark:text-gray-100 text-lg md:text-2xl text-center font-bold font-sans mb-2"
      >
        A declarative framework for designing efficient causal inference
        algorithms
      </h2>
      <a
        href="/docs/"
        class="bg-blue-700 hover:bg-blue-600 rounded-lg shadow-sm shadow-blue-400/50 transition-all text-white dark:text-gray-100 md:text-lg font-bold px-4 py-2 mt-4 md:mt-6"
      >
        Get Started
      </a>
    </section>

    <Box id="section-features">
      <Fragment slot="title">What is CIfly?</Fragment>
      <p class="text-center md:text-xl my-6 md:my-8">
        CIfly is a framework for developing and writing causal inference
        algorithms.
      </p>

      <hr class="text-blue-700 dark:text-blue-400 mb-4" />

      <div
        class="py-2 md:grid md:grid-flow-col md:auto-cols-fr md:gap-4 md:px-3 md:mx-1 md:pt-4"
      >
        <div class="mb-3 md:mb-1">
          <p
            class="text-blue-700 dark:text-blue-400 md:text-lg font-extrabold mb-1 md:mb-1"
          >
            Python and R support:
          </p>
          <p class="md:text-lg hyphens-auto">
            CIfly algorithms can be developed language-independent and easily be
            called from both Python and R.
          </p>
        </div>
        <div class="mb-3 md:mb-0">
          <p
            class="text-blue-700 dark:text-blue-400 md:text-lg font-extrabold mb-1 md:mb-1"
          >
            Concise specification:
          </p>
          <p class="md:text-lg hyphens-auto">
            Algorithms are specified in ruletables to avoid boilerplate and put
            the causal logic in the center.
          </p>
        </div>
        <div>
          <p
            class="text-blue-700 dark:text-blue-400 md:text-lg font-extrabold mb-1 md:mb-1"
          >
            Performance:
          </p>
          <p class="md:text-lg hyphens-auto">
            CIfly runs in linear time and its Rust implementation enables
            further speedups over native R or Python code.
          </p>
        </div>
      </div>
    </Box>

    <Box id="section-installation">
      <Fragment slot="title">Installation</Fragment>

      <div class="mb-2 md:mx-4">
        <p class="md:text-lg hyphens-auto">
          CIfly can be installed via pip in Python and from R-universe in R (a
          CRAN submission is planned).
        </p>

        <CodeSwitcher>
          <CodeHelper
            slot="python-code"
            code={`# Python installation with pip
pip install ciflypy`}
            lang="bash"
            title=""
            largeText={true}
          />
          <CodeHelper
            slot="r-code"
            code={`# R installation via R-universe
install.packages("ciflyr", repos = c("https://mwien.r-universe.dev"))`}
            lang="r"
            title=""
            largeText={true}
          />
        </CodeSwitcher>
        <p class="md:text-lg mb-2 hyphens-auto">
          In Python, the installation should work out-of-the-box without relying
          on any further dependencies. In R, if the package is build on your
          system, as is the case for Linux distributions, the <a
            href="https://rustup.rs/"
            class="text-blue-700 dark:text-blue-400">Rust toolchain</a
          >
          needs to be installed.
        </p>
      </div>
    </Box>

    <Box id="section-example">
      <Fragment slot="title">Example</Fragment>

      <div class="mb-2 md:mx-4">
        <p class="md:text-lg mb-4 hyphens-auto">
          As a "Hello World" example, we show how to test d-separation with
          CIfly. The CIfly algorithm specified by the following rule table
          returns all nodes d-connected to set X given set Z.
        </p>

        <Ruletable
          id="dsep"
          largeText={true}
          suppressButton={true}
          withHeader={true}
          wrapperClass="my-4"
        />

        <p class="md:text-lg my-4 hyphens-auto">
          The ruletable can be embedded into the code as a multi-line string or
          loaded via file path such as in the implementation below that tests
          d-separation using Python and R.
        </p>

        <CodeSwitcher class="text-sm md:text-base">
          <CodeHelper
            slot="python-code"
            code={`import ciflypy as cf

dsep_table_path = "./dsep.txt"

def test_dsep(G, x, y, Z):
      R = cf.reach(G, {"X": x, "Z": Z}, dsep_table_path)
      return y not in R

# for graph 0 -> 1 -> 2, test whether 0 is d-separated from 2 by 1
print(test_dsep({"-->": [(0, 1), (1, 2)]}, 0, 2, [1]))`}
            lang="py"
            title=""
            largeText={true}
          />
          <CodeHelper
            slot="r-code"
            code={`library("ciflyr")

dsepTablePath <- "./dsep.txt"

test_dsep <- function(G, x, y, Z) {
      R <- reach(G, list("X" = x, "Z" = Z), dsepTablePath)
      return (!(y %in% R))
}
# for graph 1 -> 2 -> 3, test whether 1 is d-separated from 3 by 2
print(test_dsep(list("-->" = rbind(c(1, 2), c(2, 3))), 1, 3, c(2)))
`}
            lang="r"
            title=""
            largeText={true}
          />
        </CodeSwitcher>

        <p class="md:text-lg mt-4 mb-2 md:mb-3 hyphens-auto">
          Find more details on this example and how to use CIfly <a
            href="/docs/"
            class="text-blue-700 dark:text-blue-400">in our documentation</a
          >.
        </p>
      </div>
    </Box>

    <Box id="section-applications">
      <Fragment slot="title">Applications</Fragment>

      <div class="md:mx-4">
        <p class="md:text-lg md:mb-6 hyphens-auto">
          Beyond fundamental tasks such as deciding d-separation, a large class
          of problems in causal inference can be solved flexibly using CIfly. We
          present a number of <a
            href="/applications/"
            class="text-blue-700 dark:text-blue-400">selected applications</a
          >.
        </p>

        <Carousel>
          {
            applications.map((application, idx) => (
              <CarouselSlide first={idx === 0}>
                <ApplicationCardCarousel application={application} />
              </CarouselSlide>
            ))
          }
        </Carousel>
      </div>
    </Box>

    <Box id="section-ruletables">
      <Fragment slot="title">Ruletables</Fragment>

      <div class="md:mx-4">
        <p class="md:text-lg md:mb-6 hyphens-auto">
          We believe that causal inference software should be transparent,
          reusable and easy-to-adapt to the users needs. At the core of our
          framework lie ruletables which ensure these properties. We provide
          <a href="/ruletables/" class="text-blue-700 dark:text-blue-400"
            >ruletables</a
          > for many basic primitives.
        </p>

        <Carousel>
          {
            ruletables.map((table, idx) => (
              <CarouselSlide first={idx === 0}>
                <RuletableCardCarousel ruletable={table} />
              </CarouselSlide>
            ))
          }
        </Carousel>
      </div>
    </Box>

    <Box id="section-foundations">
      <Fragment slot="title">Theoretical Foundations</Fragment>

      <div class="md:mx-4">
        <p class="md:text-lg hyphens-auto">
          CIfly is based on causality-specific reductions to reachability, which
          we formally introduce in <a
            class="text-blue-700 dark:text-blue-400"
            href="https://arxiv.org/">this paper</a
          >. The mapping to the reachability input and back to the causal domain
          is constrained such that the overall algorithm runs in linear time.
        </p>

        <div
          class="w-full md:w-3/4 mx-auto mt-6 md:mt-8 mb-4 md:mb-6 border border-gray-100 dark:border-gray-700 rounded-lg shadow-sm p-1"
        >
          <ReductionFigure />
        </div>
      </div>
    </Box>
  </div>
</Layout>
